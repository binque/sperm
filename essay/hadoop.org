* hadoop
#+OPTIONS: H:5

参考资源
   - Cloudera http://www.cloudera.com/
   - Apache Hadoop http://hadoop.apache.org/
   - Apache Hadoop r1.0.3 文档 http://hadoop.apache.org/common/docs/r1.0.3/
   - Apache Hadoop r1.0.3 中文文档 http://hadoop.apache.org/common/docs/r1.0.3/cn
   - CDH Downloads https://ccp.cloudera.com/display/SUPPORT/Downloads
   - CDH Documentation https://ccp.cloudera.com/display/DOC/Documentation
   - CDH Tutorial https://ccp.cloudera.com/display/SUPPORT/Hadoop+Tutorial

** FAQ
*** Hadoop可以用来做什么
Why Hadoop? http://www.cloudera.com/why-hadoop/

TODO(dirlt):translate it!!!

Simply put, Hadoop can transform the way you store and process data throughout your enterprise. According to analysts, about 80% of the data in the world is unstructured, and until Hadoop, it was essentially unusable in any systematic way. With Hadoop, for the first time you can combine all your data and look at it as one.
   - Make All Your Data Profitable. Hadoop enables you to gain insight from all the data you already have; to ingest the data flowing into your systems 24/7 and leverage it to make optimizations that were impossible before; to make decisions based on hard data, not hunches; to look at complete data, not samples; to look at years of transactions, not days or weeks. In short, Hadoop will change the way you run your organization.
   - Leverage All Types of Data, From All Types of Systems. Hadoop can handle all types of data from disparate systems: structured, unstructured, log files, pictures, audio files, communications records, email– just about anything you can think of. Even when different types of data have been stored in unrelated systems, you can dump it all into your Hadoop cluster before you even know how you might take advantage of it in the future.
   - Scale Beyond Anything You Have Today. The largest social network in the world is built on the same open-source technology as Hadoop, and now exceeds 100 petabytes. It’s unlikely your organization has that much data. As you need more capacity, you just add more commodity servers and Hadoop automatically incorporates the new storage and compute capacity.
     
*** Hadoop包括哪些组件
TODO(dirlt):translate it!!!

Apache Hadoop包括了下面这些组件：
   - [[http://hadoop.apache.org/common/][Hadoop Common]] The common utilities that support the other Hadoop subprojects.
   - [[http://hadoop.apache.org/hdfs/][Hadoop Distributed File System(HDFS)]] A distributed file system that provides high-throughput access to application data.
   - [[http://hadoop.apache.org/mapreduce/][Hadoop MapReduce]] A software framework for distributed processing of large data sets on compute clusters.
和Apache Hadoop相关的组件有：
   - [[http://avro.apache.org/][Avro]] A data serialization system.
   - [[http://cassandra.apache.org/][Cassandra]] A scalable multi-master database with no single points of failure.
   - [[http://incubator.apache.org/chukwa/][Chukwa]] A data collection system for managing large distributed systems.
   - [[http://hbase.apache.org/][HBase]] A scalable, distributed database that supports structured data storage for large tables.
   - [[http://hive.apache.org/][Hive]] A data warehouse infrastructure that provides data summarization and ad hoc querying.
   - [[http://mahout.apache.org/][Mahout]] A Scalable machine learning and data mining library.
   - [[http://pig.apache.org/][Pig]] A high-level data-flow language and execution framework for parallel computation.
   - [[http://zookeeper.apache.org/][ZooKeeper]] A high-performance coordination service for distributed applications.

*** CDH和Apache Hadoop的关系
CDH Hadoop FAQ https://ccp.cloudera.com/display/SUPPORT/Hadoop+FAQ

TODO(dirlt):translate it!!!

   - What exactly is included in CDH? / Cloudera's Distribution Including Apache Hadoop (CDH) is a certified release of Apache Hadoop. We include some stable patches scheduled to be included in future releases, as well as some patches we have developed for our supported customers, and are in the process of contributing back to Apache.
   - What license is Cloudera's Distribution Including Apache Hadoop released under? / Just like Hadoop, Cloudera's Distribution Including Apache Hadoop is released under the Apache Public License version 2.
   - Is Cloudera forking Hadoop? / Absolutely not. Cloudera is committed to the Hadoop project and the principles of the Apache Software License and Foundation. We continue to work actively with current releases of Hadoop and deliver certified releases to the community as appropriate.
   - Does Cloudera contribute their changes back to Apache? / We do, and will continue to contribute all eligible changes back to Apache. We occasionally release code we know to be stable even if our contribution to Apache is still in progress. Some of our changes are not eligible for contribution, as they capture the Cloudera brand, or link to our tools and documentation, but these do not affect compatibility with core project.

** 观点
*** Hadoop即将过时了吗？
http://www.kuqin.com/database/20120715/322528.html google提出的三个东西都是解决hadoop的软肋，最终目的还是需要解决大数据上面的实时性问题。

   - 增量索引过滤器（Percolator for incremental indexing）和频繁变化数据集分析。Hadoop是一台大型“机器”，当启动并全速运转时处理数据的性能惊人，你唯一需要操心的就是硬盘的传输速度跟不上。但是每次你准备启动分析数据时，都需要把所有的数据都过一遍，当数据集越来越庞大时，这个问题将导致分析时间无限延长。那么Google是如何解决让搜索结果返回速度越来越接近实时的呢？答案是用增量处理引擎Percolator代替GMR。通过只处理新增的、改动过的或删除的文档和使用二级指数来高效率建目录，返回查询结果。Percolator论文的作者写道：“将索引系统转换成增量系统…将文档处理延迟缩短了100倍。”这意味着索引web新内容的速度比用MapReduce快100倍！类似大型强子对撞机产生的数据将不断变大，Twitter也是如此。这也是为什么HBase中会新增触发流程，而Twitter Storm正在成为实时处理流数据的热门技术。
   - 用于点对点分析的Dremel。Google和Hadoop生态系统都致力于让MapReduce成为可用的点对点分析工具。从Sawzall到Pig和Hive，创建了大量的界面层，但是尽管这让Hadoop看上去更像SQL系统，但是人们忘记了一个基本事实——MapReduce(以及Hadoop)是为组织数据处理任务开发的系统，诞生于工作流内核，而不是点对点分析。今天有大量的BI/分析查询都是点对点模式，属于互动和低延迟的分析。Hadoop的Map和Reduce工作流让很多分析师望而却步，而且工作启动和完成工作流运行的漫长周期对于很多互动性分析来说意味着糟糕的用户体验。于是，Google发明了Dremel（业界也称之为BigQuery产品）专用工具，可以让分析师数秒钟内就扫描成PB（Petabyte）的数据完成点到点查询，而且还能支持可视化。Google在Dremel的论文中声称：“Dremel能够在数秒内完成数万亿行数据的聚合查询，比MapReduce快上100倍！”
   - 分析图数据的Pregel。Google MapReduce的设计初衷是分析世界上最大的数据图谱——互联网。但是在分析人际网络、电信设备、文档和其他一些图数据时就没有那么灵光了，例如MapReduce在计算单源最短路径（SSSP）时效率非常低下，已有的并行图算法库Parallel BGL或者CGMgraph又没有容错。于是Google开发了Pregel，一个可以在分布式通用服务器上处理PB级别图数据的大型同步处理应用。与Hadoop经常在处理图数据时产生指数级数据放大相比，Pregel能够自然高效地处理SSSP或PageRank等图算法，所用时间要短得多，代码也简洁得多。目前唯一能与Pregel媲美的开源选择是Giraph，这是一个早期的Apache孵化项目，调用了HDFS和Zookeeper。Githb上还有一个项目Golden Orb可用。

*** MapReduce和并行数据库，朋友还是敌人？
http://www.cnblogs.com/chinacloud/archive/2010/12/03/1895365.html 第四主题

在 2010年1月的ACM上，有两篇文章非常吸引人注意。一篇文章是Google的Jeffrey Dean、Sanjay Ghemawat发表的标题为《MapReduce:一个灵活的数据库处理工具》，另一篇文章是Michael Stonebraker、Daniel  Abadi、 David J. DeWitt、Sam Madden、Erik Paulson、Andrew Pavlo、Alexander、Rasin等人发表的《MapReduce和并行数据库：是朋友还是敌人？》。这两篇文章让我想起去年初Michael Stonebraker等人就MapReduce发表的一些评论而导致了一次MapReduce和数据库系统的大辩论。那篇文章的标题是《MapReduce：一个巨大的倒退》。这次辩论双方则准备了丰富的实践和实验案例。看上去更加有趣也更加有说服力。以下“正方”代表坚持并行数据库解决方案的Andrew Pavlo、 Michael Stonebraker等，而反方则是Google的MapReduce（下文简称MR）的拥趸Jeffrey Dean、Sanjay Ghemawat等。

--------------------

正方抛出观点。2009 年Andrew Pavlo等人发表了一篇标题为《大规模数据分析的方法对比》（http://database.cs.brown.edu/projects/mapreduce-vs-dbms/ ）的文章，里面对比了数据库和MR两种大规模数据分析方法的对比。通过对比流行的MR软件 Hadoop和一种并行数据库之间的架设、使用和性能等方面的异同，指出MR并不是解决大规模数据分析的好方法，其在性能、易用性等方面有诸多问题：
   - MR没法用索引，总是对数据进行完全扫描；
   - MR输入和输出，总是文件系统中的简单文件；
   - MR需要使用不高效的文本数据格式。

--------------------

反方接招。
   - 对于正方第一个观点，反方如此应对：“错了！MR的输入本身可以是数据库的输出，所以，我们是可以用索引的。另外一个例子是MR从BigTable里面读取数据，如果数据落在一个行范畴里面，当然是可以用索引的。而且，在很多需要处理的数据里头，比如Web Server的日志，经过轮转之后天然就有索引（文件名包含时间戳）。”
   - 对于第二个观点，反方认为：“现存的很多MR系统，本身就是一个异构环境，用户的数据可能存储在关系数据库里头，而其处理结果可能会记录在文件系统里头。而且，这样的环境可能会进化，用户的数据会迁移到新的系统里。而MR可以非常便利地在这些环境上运行。更进一步，用户可以扩展这些存储，比如分布文件系统、数据库查询结果，存储在BigTable里面的数据，结构化的数据（B-tree文件等）。对于这些场合，单个MR处理就可以很容易地捏合它们。”
   - 对于第三个观点，反方认为：“这点的确很精辟。很到位，不过这个因素是取决于具体的实现的，比如在Google的MR实现里，有个 Protocol Buffer层，可以对输入的数据进行格式定义，因此就可以直接适用二进制类型，而不用有额外的格式转换的开销，在我们的测试里，原来要花1731ns的一个格式分析，用Protocol Buffer预定义之后，只要20几ns。所以，如果实现得足够好，我们认为MR系统不会只能处理文本格式的数据，而是可以处理二进制数据，因此效率还可以极大提升。”

除了这些之外，反方还抛出了几块大砖头，等着正方接招：
   - MR与存储系统无关，而且可以不用把数据装载到数据库就直接处理之，在很多场合下，在数据库系统把数据装载到数据库里头并且完成一次分析所花的时间，用MR的方式都能完成50次分析运算了。
   - MR可以表现更复杂的数据变换规则，很多反方的意见都是实现相关的，是针对一些不好的MR的实现做出来的，因此站不住脚。反方的最有力的证据就是，在Google里头跑得很好的一万多各种MR应用，从网页分析到索引建立，从日志分析到网图计算等等。

--------------------

正方的回应。作为正方，Michael Stonebraker 教授等人在同一期杂志上发表了另外一篇文章，很有趣的是刚好排在反方的文章之前。这篇文章以批评与自我批评的方式提出了若干有趣的观点，其中有些刚好是对反方的一个回应：MR系统可以用于（注意：不是胜出）下列场合：
   - ETL类的应用：从多个不同的源读取日志信息；分析以及清理日志数据；执行复杂的变换，比如“会话转换”；决定存储什么样的属性以及把信息装载到DBMS或者其他存储引擎中；
   - 复杂分析应用：这种挖掘类型的应用需要对数据进行多步骤的计算和处理，通常一个程序的输出会是另外一个程序的输入，因此很难用单个SQL语句来表示，这种应用场合下，MR是很好的候选方案；
   - 半结构化数据：因为MR不需要对数据的存储进行格式定义，因此MR比较适合处理半结构化数据，这些数据通常都是一些键值对。这些场合下，MR非常适合做 ETL的事情，如果并行数据库选用了面向列的存储方案，并且查询大多是分析性的查询，那么数据库方案依然是更好些的选择（正方有试验结果支撑）；
   - 快速实施的系统：并行数据库最大的缺点就是架设和调优难度要比MR大得多，虽然一旦架设、调优完毕，并行数据库系统表现出远胜MR的性能和特性，但对大多数急于上手的入门级用户来说，并行数据库系统的学习门槛显然要高得多。最后就是成本，虽然并行数据库在性能和应用编写简易性方面明显胜于MR系统，但现实世界里确实还缺乏完善和健壮的低成本开源解决方案，这点是MR最大的优点。数据库社区显然在这个方面输了一阵。

正方认为，把适合于数据库的工作交给MR去做结果其实并不好。在正方的试验里，证实了MR更加适用于做数据转换和装载的（ETL）工作，在这些场合，MR可以成为并行数据库的良好补充，而不是替代品。为了证明上述论点，正方做了一些有趣的试验，试验对比的双方是并行数据库集群和Hadoop集群，试验的主要内容有：
   - Grep任务：两个系统都对分布在100个节点上的1TB数据进行无法使用排序和索引的Grep处理，按说应该是面向更低层数据接口的Hadoop胜出，结果却出乎人们的意料，是并行数据库快了两倍左右。
   - Web 日志分析：两个系统都对分布在100个节点上的2TB数据进行类似GROUP BY的操作，对每个来源IP的点击和计费记录进行统计运算，这也是一个对所有数据进行扫描的操作，没有办法使用排序和索引。所以，直觉认为直接操作数据文件、更低层的Hadoop应该胜出，结果依然让人大跌眼镜，并行数据库胜出面甚至比Grep任务还要大。
   - 连接（Join）任务的性能：把上面测试的用户访问日志和另外一个包含18M URL的100GB的PageRank表连接起来。这个连接有两个子任务，分别对两个数据集进行复杂的计算。第一个子任务连接在一个特定用户数据范围内找出收入最高的IP地址，找到后再由第二个子任务连接计算这个范围内被访问页面的平均PageRank。数据库对付这种设计复杂连接的分析性查询是非常在行的。最后的结果是并行数据库比Hadoop快了21~36倍。

针对上面的结果，正方做了一些分析，认为这些差距的来源主要来自于具体实现，而非并行数据库模型和MR模型之间的差异。比如，MR可以使用并行数据库为低层的存储，所以所有分析都针对现实中两种模式的具体实现。正方分析了导致差距的几个实现相关的架构原因：
   - 数据解析。Hadoop需要用户代码来对输入的文本数据进行解析，然后再加以计算，而这个解析是每个Map和每个Reduce过程都要进行的，相比之下，并行数据库系统只在装载数据的时候解析一次数据，中间计算的开销大大降低。
   - 数据压缩。并行数据库系统使用数据压缩后，性能显著提升，而MR系统却不能，甚至倒退，在反方的试验中，也没有使用压缩，这方面让人感到奇怪，分析出来的可能原因是商业数据库系统对压缩的调优做得比较好，很多压缩算法，比如gzip，未经调优的话，在现代的CPU上，甚至都不能提供什么优势。
   - 管道化。现代数据库系统基本上都是先生成一个查询规划，然后在执行的时候把计算分发到相应节点上。在该计划里一个操作符必须向下一个操作符发送数据，不管下一个操作符是否在同节点上，因此，合格数据是由第一个操作符“推送”给第二个操作符的。这就构成了良好的从生产者到消费者的流水线作业。中间状态的数据不会写到磁盘上，这种运行时的“背压”会在生产者把消费者整崩溃之前把生产者停下来。这种流水线方式和MR的实现不同，MR是把中间状态写到一个本地的数据结构中，然后由消费者“拖取”。这种本地数据结构通常是相当庞大的，虽然这种做法可以在中间步骤上设置更多检查点，从而可以有更好的容错性，但很显然也引入了新的瓶颈。
   - 调度。在测试的并行数据库一方，查询规划是编译时生成，运行时执行。而MR的调度方案是运行时针对每个存储块，在处理节点上调度一次。这种对每个存储块一次的调度显然开销要大得多。当然，这种调度方式可以让MR适应不同的负载风格和不同性能的节点。
   - 面向列的存储。这个在对比双方的系统里都不存在。但却是并行数据库可以进一步提升的手段。

正方经过试验得出的结论是：MR和并行数据库结合是最好的方案，MR负责数据装载、转换等工作，并行数据库负责查询密集型的任务。正方最后发出的振聋发聩的呼吁是：很多事情并行数据库系统已经做得很好了，我们为什么不站在这个巨人的肩膀上？

*** MapReduce：一个重大的倒退
原文 http://apps.hi.baidu.com/share/detail/6912773

英文 http://www.databasecolumn.com/2008/01/mapreduce-a-major-step-back.html

认为MapReduce相对于数据管理系统是一个巨大退步。

MapReduce可能在某些特定类型的通用计算上是个不错的想法，但是对于数据库社区来说：
   - 从大规模数据应用程序模型来说是一个巨大的倒退。
   - 不是一个最优实现，因为它使用蛮力来代替索引。
   - 一点都不新奇，它只是实现了一个特定的25年前就有的众所周知的技术。
   - 失去了大部分目前数据库管理系统的特性。
   - 不能兼容所有目前数据库管理系统用户已经依赖的工具。

--------------------

MapReduce是一个数据库存取的退步。做为一个数据处理模型，MapReduce呈现出了一个巨大的退步。数据库社区从IBM在1968年第一次发布IMS以来的四十年中学到了以下三个经验：
   - 结构描述是好的。
   - 将结构描述从程序中分离是好的
   - 高阶的访问语言是好的
MapReduce没有吸引上面三个经验中的任何一个，而且还退步到了现在数据库管理系统发明前的60年代。

数据库管理系统社区学习到的关于最重要的结构描述就是：记录的字段和它的数据类型都记录在存储系统中。更重要的是，数据库管理系统的运行时可以保证所有的记录都遵守结构描述。这是避免将垃圾数据添加到数据集中的最好的方法。MapReduce没有这样的方法，也没有避免将垃圾数据添加到数据集中的控制。一个毁坏的数据集可以悄无声息的破坏整个使用这个数据集的MapReduce程序。

将数据描述与程序分离也很关键。如果开发者想在一个数据集上开发一个新的程序，他必须先去了解记录结构。在现代数据库管理系统中，结构描述存储在系统目录中，而且可以被用户用SQL查询来了解它的结构。与此相反的是，如果数据描述不存在，或者隐藏在程序之中，开发者要了解这个数据结构必须通过检查原有的代码。这个工作不仅仅是非常沉闷的，而且开发者必须先找到这个程序的源代码。如果没有相应的结构描述存在，后面的这个沉闷的问题将在所有的MapReduce程序中存在。

在1970年数据库管理系统社区，关系型数据库支持者和数据系统语言协会(Codasyl)支持者进行了一场“剧烈的辩论”。其中一个最大的争议是数据库管理系统的访问程序以何种方式访问：
   -　用统计来获取你想要的数据(关系型的观点)
   - 提供一个算法来进行数据访问(Codasyl的观点)
争论的结果已经是古代史了，但是整个世界都看到了高阶语言的价值以及关系型系统的胜利。以高阶语言的形式编程更加容易编写，易于修改，而且方便一个新来者的理解。Codasyl被批判为“以汇编语言的形式来对数据库管理系统进行访问”。MapReduce程序员有点类似Codasyl程序员。他们用低阶的语言来处理低阶记录。没有人提倡回归汇编语言，类似的，不应该强制任何人用MapReduce来编程。

--------------------

MapReduce是一个粗糙的实现。所有现在数据库管理系统使用hash或者B-tree来索引加快对数据的访问。如果一个用户在查找一个记录集的子记录集（比如雇员中谁的薪水在10000或者谁在鞋生产部门），那么他可以使用索引来有效的缩减查找范围。另外，还提供了一个查询优化器来决定到底是使用索引还是进行一个残忍野蛮的顺序查询。MapReduce没有索引，理所当然的只能使用蛮力来作为处理选项。而不管索引在当前情况下是否是一个最好的访问机制。

一个值得争论的是，MapReduce提出的自动的在计算机集群中提供并行计算的价值。其实这个特性在1980年时代就被数据库管理系统研究社区研究过了，多个原型被提出来，比如Gamma，Bubba和Grace。商业化的利用这些思想在系统则在80年代末期，比如Teradata。概括起来说，在前20年已经出现了高性能，商业化的，面向网格计算机群的SQL引擎（带结构描述和索引）。MapReduce跟这些系统相比并没有那么好。

MapReduce同时存在很多底层的实现问题，特别是数据交换和数据斜交的情况。
   - 一个因素是MapReduce支持者好像没有注意到关于数据斜交的问题。就像在“平行数据库系统：未来的高性能数据库系统”中提到的，数据斜交是构建成功高扩展性并行查询系统的巨大障碍。这个问题重现在map阶段，当拥有相同键的数据拥有大幅度差异的时候。这个差异，反过来导致某些reduce实例花费比其它实例更长甚至常很多的时间来运行。结果就是计算的运行时间由速度最慢的那个reduce实例决定。平行数据库社区已经广泛的研究了这个问题并且拥有了成熟的，MapReduce社区可能愿意采纳的解决方案。
   - 还有第二个严重的性能问题被MapReduce支持者掩盖了。回忆N个map实例中的每个实例都将生成M个输出文件。每个都分发给不同的reduce实例。这些文件都被写入本地硬盘以备map实例使用。如果N是1000，M是500，那么在map阶段将生成500000个本地文件。当reduce阶段开始，500个reduce实例必须读取1000个输入文件，必须使用类似FTP的协议将每个输入文件从各个map实例运行的节点中获取（pull）过来。在100秒内所有reduce实例将同时的运行起来，不可避免的会发生两个或者更多个reduce实例企图并行的从同一个map节点中获取输入文件，包括大量的磁盘搜索，当超过因子20时，将极大的降低磁盘的有效传输率。这就是为什么并行数据库系统不实现分割文件，而使用推(push to sockets)来代替拉(pull)。因为MapReduce通过实现分割文件来获得优秀的容错性，不好说如果MapReduce框架修改成使用推(push)模型是否会成功。

鉴于实验评估，我们严重的怀疑MapReduce在大规模应用中会表现的很好。MapReduce的实现者还需要好好的研究过去25年来并行数据库管理系统的研究文献。

--------------------

MapReduce并不新奇。MapReduce社区看起来感觉他们发现了一个全新的处理大数据集的模型。实际上，MapReduce所使用的技术至少是20年前的。将大数据集划分为小数据集的思想是在Kitsuregawa首次提出的“Application of Hash to Data Base Machine and Its Architecture”的基础上发展出来的一个新的连接算法。在“Multiprocessor Hash-Based Join Algorithms”中，Gerber演示了如何将Kitsuregawa的技术扩展到使用联合分区表，分区执行以及基于hash的分割来连接并行的无共享集群。DeWitt演示了如何采用这些技术来执行有group by子句以及没有group by子句的并行聚合。DeWitt和Gray描述了并行数据库系统以及他们如何处理查询。Shatdal和Naughton探索了并行聚合的替代策略。

Teradata已经出售利用这些技术构建的数据库管理系统20多年了，而这些技术正是MapReduce一伙声称的发明的技术。当然MapReduce提倡者将毫无疑问的声称他们编写的MapReduce函数实现他们的软件与使用并行SQL实现有多么大的不同，我们必须提醒他们，POSTGRES已经在80年代中期就支持了用户自定义函数以及用户自定义聚合。本质上来说，从1995年Illustra引擎开始算，所有现代数据库系统都提供了类似的功能很长一段时间了。

--------------------

MapReduce失去了很多特性。所有下面的特性都被现在的数据库管理系统提供了，而MapReduce没有：
   - 批量导入 将输入数据转化成想要的格式并加载到数据库中
   - 索引 如上文所述
   - 更新 改变数据集中的数据
   - 事务 支持并行更新以及从失败的更新中恢复
   - 完善的约束 防止垃圾数据添加到数据集
   - 完善的引用 类似FK，防止垃圾数据的存在
   - 视图 底层逻辑数据描述可以改变但不需要重写程序
简单的说来，MapReduce只提供了现在数据库管理系统的函数性功能。

--------------------

MapReduce与现有的数据库管理系统工具不兼容。一个现代的SQL数据库管理系统都拥有如下可用的工具：
   - 报表 (比如水晶报表) 将数据友好的展示给人
   - 商业智能工具 (比如Business Objects or Cognos)允许在数据仓库中进行特定查询
   - 数据挖掘工具 (比如Oracle Data Mining)允许用户在大数据集中发现数据规律
   - 复制工具 允许用户在不同的数据库中进行复制传输
   - 数据库设计工具 帮助用户构建数据库
MapReduce不能使用这些工具，同时它也没有自己的工具。直到它能与SQL兼容或者有人编写了这些工具，MapReduce仍然在端到端的任务中显得十分困难。

*** Best Practices for Selecting Apache Hadoop Hardware
http://hortonworks.com/blog/best-practices-for-selecting-apache-hadoop-hardware/

RAID cards, redundant power supplies and other per-component reliability features are not needed. Buy error-correcting RAM and SATA drives with good MTBF numbers. Good RAM allows you to trust the quality of your computations. Hard drives are the largest source of failures, so buy decent ones.（不需要选购RAID，冗余电源或者是一些满足高可靠性组件，但是选择带有ECC的RAM以及good MTBF的SATA硬盘却是非常需要的。ECC RAM可以让你确保计算结果的正确性，而SATA故障是大部分故障的主要原因）

   - On CPU: It helps to understand your workload, but for most systems I recommend sticking with medium clock speeds and no more than 2 sockets. Both your upfront costs and power costs rise quickly on the high-end. For many workloads, the extra performance per node is not cost-effective.（没有特别要求，普通频率，dual-socket？？？）
   - On Power: Power is a major concern when designing Hadoop clusters. It is worth understanding how much power the systems you are buying use and not buying the biggest and fastest nodes on the market.In years past we saw huge savings in pricing and significant power savings by avoiding the fastest CPUs, not buying redundant power supplies, etc.  Nowadays, vendors are building machines for cloud data centers that are designed to reduce cost and power and that exclude a lot of the niceties that bulk up traditional servers.  Spermicro, Dell and HP all have such product lines for cloud providers, so if you are buying in large volume, it is worth looking for stripped-down cloud servers. （根据自己的需要尽量减少能耗开销，撇去一些不需要的部件。而且现在很多厂商也在尽量减少不必要的部件）
   - On RAM: What you need to consider is the amount of RAM needed to keep the processors busy and where the knee in the cost curve resides. Right now 48GB seems like a pretty good number. You can get this much RAM at commodity prices on low-end server motherboards. This is enough to provide the Hadoop framework with lots of RAM (~4 GB) and still have plenty to run many processes. Don’t worry too much about RAM, you’ll find a use for it, often running more processes in parallel. If you don’t, the system will still use it to good effect, caching disk data and improving performance.（RAM方面的话越大越好，对于48GB的RAM来说普通的主板也是支持的。如果RAM用的上的话那么允许多个进程并行执行，如果暂时永不上的话可以做cache来提高速度）
   - On Disk: Look to buy high-capacity SATA drives, usually 7200RPM. Hadoop is storage hungry and seek efficient but it does not require fast, expensive hard drives. Keep in mind that with 12-drive systems you are generally getting 24 or 36 TB/node. Until recently, putting this much storage in a node was not practical because, in large clusters, disk failures are a regular occurrence and replicating 24+TB could swamp the network for long enough to really disrupt work and cause jobs to miss SLAs. The most recent release of Hadoop 0.20.204 is engineered to handle the failure of drives more elegantly, allowing machines to continue serving from their remaining drives. With these changes, we expect to see a lot of 12+ drive systems. In general, add disks for storage and not seeks. If your workload does not require huge amounts of storage, dropping disk count to 6 or 4 per box is a reasonable way to economize.（高容量SATA硬盘，最好是7.2KRPM，并且最好单机上面挂在12个硬盘。对于hadoop之前这种方式并不实际，因为磁盘非常容易损坏并且备份这24TB的数据非常耗时。而hadoop可以很好地解决这个问题。
小集群来说的话，通常单个机器上面挂在4-6个disk即可）
   - On Network: This is the hardest variable to nail down. Hadoop workloads vary a lot. The key is to buy enough network capacity to allow all nodes in your cluster to communicate with each other at reasonable speeds and for reasonable cost. For smaller clusters, I’d recommend at least 1GB all-to-all bandwidth, which is easily achieved by just connecting all of your nodes to a good switch. With larger clusters this is still a good target although based on workload you can probably go lower. In the very large data centers the Yahoo! built, they are seeing 2*10GB per 20 node rack going up to a pair of central switches, with rack nodes connected with two 1GB links. As a rule of thumb, watch the ratio of network-to-computer cost and aim for network cost being somewhere around 20% of your total cost. Network costs should include your complete network, core switches, rack switches, any network cards needed, etc. We’ve been seeing InfiniBand and 10GB Ethernet networks to the node now. If you can build this cost effectively, that’s great. However, keep in mind that Hadoop grew up with commodity Ethernet, so understand your workload requirements before spending too much on the network.（这个主要还是看需求。通常来说网络整体开销占据所有开销的20%，包括核心交换机，机架之间的交换机以及网卡设备等。yahoo大集群的部署方式是rack之间使用2*10GB的核心交换机工作，而20个节点的rack之间内部使用1GB链路）。

*** The dark side of Hadoop - BackType Technology
http://web.archive.org/web/20110510125644/http://tech.backtype.com/the-dark-side-of-hadoop

谈到了一些在使用hadoop出现的一些问题，而这些问题是hadoop本身的。
   - Critical configuration poorly documented 一些关键的参数和配置并没有很好地说明清楚。
   - Terrible with memory usage 内存使用上面存在问题。hadoop里面有一些非常sloppy的实现，比如chmod以及ln -s等操作，并没有调用fs API而是直接创建一个shell进程来完成。因为fork出一个shell进程需要申请同样大小的内存（虽然实现上是COW），但是这样造成jvm出现oom。解决的办法是开辟一定空间的swap The solution to these memory problems is to allocate a healthy amount of swap space for each machine to protect you from these memory glitches. We couldn't believe how much more stable everything became when we added swap space to our worker machines.
     - Thomas Jungblut's Blog: Dealing with "OutOfMemoryError" in Hadoop http://codingwiththomas.blogspot.jp/2011/07/dealing-with-outofmemoryerror-in-hadoop.html 作者给出的解决办法就是修改hadoop的代码，通过调用Java API而不是使用ProcessBuilder来解决。
     - *NOTE(dirlt):出现OOM的话必须区分JVM还是Linux System本身的OOM。JVM出现OOM是抛出异常，而Linux出现OOM是会触发OOM killer* 
   - Zombies hadoop集群出现一些zombie进程，而这些进程会一直持有内存直到大量zombie进程存在最后需要重启。造成这些zombie进程的原因通常是因为jvm oom（增加了swap之后就没有出现这个问题了），但是奇怪的是tasktracker作为这些process的parent，并不负责cleanup这些zombie进程而是依赖这些zombie进程的自己退出，这就是hadoop设计方面的问题。

Making Hadoop easy to deploy, use, and operate should be the #1 priority for the developers of Hadoop.

** 使用问题
*** 搭建单节点集群
搭建单节点集群允许我们在单机做一些模拟或者是测试，还是非常有意义的。如何操作的话可以参考链接 http://z/home/dirlt/utils/hadoop-0.20.2-cdh3u3/docs/single_node_setup.html
这里稍微总结一下：
   - 首先安装ssh和rsync # sudo apt-get install ssh &&  sudo apt-get install rsync 
   - 本机建立好信任关系 # cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys
   - 将{hadoop-package}/conf配置文件修改如下：
   - conf/core-site.xml
#+BEGIN_SRC XML
<configuration>
     <property>
         <name>fs.default.name</name>
         <value>hdfs://localhost:9000</value>
     </property>
</configuration>
#+END_SRC
   - conf/hdfs-site.xml
#+BEGIN_SRC XML
<configuration>
     <property>
         <name>dfs.replication</name>
         <value>1</value>
     </property>
</configuration>
#+END_SRC

   - conf/mapred-site.xml
#+BEGIN_SRC XML
<configuration>
     <property>
         <name>mapred.job.tracker</name>
         <value>localhost:9001</value>
     </property>
</configuration>
#+END_SRC
   - 格式化namenode # bin/hadoop namenode -format
   - 启动hadoop集群 # bin/start-all.sh
   - 停止hadoop集群 # bin/stop-all.sh
   - webconsole
     -  NameNode - http://localhost:50070/ 
     -  JobTracker - http://localhost:50030/

*** OutOfMemoryError
   - hadoop的mapreduce作业中经常出现Java heap space解决方案 http://blog.sina.com.cn/s/blog_6345041c01011bjq.html
   - Hadoop troubleshooting http://ww2.cs.fsu.edu/~czhang/errors.html
   - Thomas Jungblut's Blog: Dealing with "OutOfMemoryError" in Hadoop http://codingwiththomas.blogspot.jp/2011/07/dealing-with-outofmemoryerror-in-hadoop.html
   - NoSQL | Hadoop http://www.nosql.se/tags/hadoop/

总结起来大致就是以下几种原因吧：
   - Increase the heap size for the TaskTracker, I did this by changing HADOOP_HEAPSIZE to 4096 in /etc/hadoop/conf/hadoop-env.sh to test.  This did not solve it.（增加TaskTracker的heapsize）
   - Increase the heap size for the spawned child.  Add -Xmx1024 in mapred-site.xml for mapred.map.child.java.opts.  This did not solve it. （增加task的heapsize）
   - Make sure that the limit of open files is not reached, I had already done this by adding “mapred – nofile 65536″ in /etc/security/limits.conf.  This did not solve it. （增加文件数目限制）
   - Adding the following to /etc/security/limits.conf and restarting the TaskTracker solved it "mapred – nproc 8192" （增加开辟子进程的数目） 

** Topic
*** Scheduler
   - Fair Scheduler Guide http://archive.cloudera.com/cdh/3/hadoop/fair_scheduler.html
   - Job Scheduling in Hadoop | Apache Hadoop for the Enterprise | Cloudera http://www.cloudera.com/blog/2008/11/job-scheduling-in-hadoop/
   - Understanding Apache Hadoop’s Capacity Scheduler | Hortonworks http://hortonworks.com/blog/understanding-apache-hadoops-capacity-scheduler/
   - Upcoming Functionality in “Fair Scheduler 2.0″ | Apache Hadoop for the Enterprise | Cloudera http://www.cloudera.com/blog/2009/04/upcoming-functionality-in-fair-scheduler-20/


** Hadoop权威指南
*** 初识Hadoop
古代，人们用牛来拉中午，当一头牛拉不动一根圆木的时候，他们不曾想过培育更大更壮的牛。同样，我们也不需要尝试开发超级计算机，而应试着结合使用更多计算机系统。

*** 关于MapReduce
   - 设置HADOOP_CLASSPATH就可以直接使用hadoop CLASSNAME来在本地运行mapreduce程序。 *TODO(dirlt): try it*

*** 


