* design-reading
** T11的文艺模型
当年12306订票系统在春运时候挂掉，引起了IT界的广泛讨论。当时T11就针对这个问题提出了文艺模型。当时自己没有太多感悟，后来同学和我解释一下之后，才感慨颇多。

T11的文艺模型主要关心的就是极限吞吐。极限吞吐(sustained throughput)就是为了能够在存在很大压力的时候依然能够保持很高的吞吐。之所谓在很多大压力的时候很多模型会垮掉原因是有多方面的。比如大量连接不活跃但是占用了很多内存，或者如果是多线程模型线程切换耗CPU等。垮掉原因的本质就是因为大压力的时候系统耗费了很多资源在没有必要的地方了。解决办法就是能够提早发现这种情况，然后尽快地将一部分压力去除掉(比如拒绝连接等)，以保证整体系统的可用性。这个就是T11的最主要思想。

后来云风一篇关于[[http://blog.codingnow.com/2012/02/ring_buffer.html][RingBuffer博文]] 重新让我思考了这个问题。我重新阅读了一下T11的Kylin代码，主要也是关于内存管理的部分。虽然内存管理部分非常简单，但是也是存在部分策略在里面的。之后T11在微博上也和我提到了这点，就是对于一个复杂点的系统来说，比如存储系统等，如果要实现得好，至少一半以上的工作是在做OS。。无独有偶，就在前几天tencent的一个后台开发总监也提到了这个问题，关于[[http://djt.qq.com/article-156-1.html][过载保护]] 。思想和T11文艺模型是一样的。

T11确实是一个看过同时做过很多的人。这是他空间的一篇文章[[http://hi.baidu.com/linsd99/blog/item/dbdaef3ce804f3e054e72392.html][列举了架构相关的学习材料]]。

** Suffering-oriented programming
http://nathanmarz.com/blog/suffering-oriented-programming.html

名字取得非常贴切，根据自己的需要（或者是自己长期忍受的问题）来进行编程，这样才能够最大程度地避免复杂性，简化设计以及减少risk（所以作者认为storm开发过程只能够说是challenging而不是risky）

在具体操作的时候分为三个部分进行
   - First make it possible. 解决现有的问题不管是否dirty，主要是尽快地碰到问题域收集use cases。
   - Then make it beautiful. 在现有的use cases上面进行提取（distill），并且进行抽象（abstraction）进行设计。
   - Then make it fast. 做小层面的optimization而不要修改整个architecture。
然后这三个过程不断地进行迭代。

** T11的浅谈架构
http://qing.weibo.com/2244218960/85c4105033000bwp.html

具体到领域上，我觉得主要有三类架构问题（不包括硬件）：
   1. 软件架构，其典型用例是企业级软件，通过合理的功能抽象，提取出公共组件和通用流程，进行最大化的功能复用 (reuse)。我称其为软件的可维护性问题。
   2. 系统架构，其巅峰是OS，重点是解决资源的分配与复用 (multiplexing)。
   3. 大规模分布式架构，主要应用在Cloud中，重点是大规模系统的资源整合、快速交付和运维问题。
1有《Design Patterns》一书，2有很多OS、并行程序设计的书可供参考 (或者应该写本《Parallel Patterns》？)，3目前我还不知道有什么书可参考。

** The Tyranny of the Clock
http://cacm.acm.org/magazines/2012/10/155552-the-tyranny-of-the-clock/fulltext

在Turing年代，芯片的logic相对来说比较复杂并且执行缓慢，相对来说通信非常快并且代价小。但是在现代设计的话，通信代价上来了而我们却没有跟进这种变化，作者认为这样会造成巨大的浪费。
每个zone之间进行同步越来越困难（换成硬件应该就是各个chip之间做时钟同步代价），阻碍着数据流的继续。我们应该让communication rather than logic should dominate our thinking.

The clock-free paradigm I promote relates to the clocked design paradigm as a "free economy" relates to a "controlled economy." We can regain the efficiency of local decision making by revolting against the pervasive beat of an external clock.（对于clock-free的设计就好比自由经济，相对于控制经济而言能通过局部决策以及避免外部时钟在各个地方的同步来提高效率。

The paradigm shift I seek faces three formidable obstacles: technical, social and courage.（这种转变会带来三个可怕的障碍） *NOTE（dirlt）：这大概是所有新技术的共同点吧！*
   - First, technical: Make no mistake; designing a clock-free system can face the same hard problems of parallelism that give software people nightmares. But a few pioneers have shown that clock-free design is possible and sometimes even easy. The pioneers have uncovered benefits like using less than half, 40%, of the energy per operation as reported by Cornell. （技术方面实现正确比较困难）
   - Second, social: All of today's commercial design tools assume clocked design. All engineering schools teach clocked design. Will we ever train enough young people in the clock-free paradigm for it to self-perpetuate? （现在所有的知识都是关于clock design的。我们是否能够训练出足够的年轻人来掌握clock-free这种范式来使得它继续存在下去）
   - Third, courage: Management knows the costs, difficulties, and results of the "tried and true" clocked design paradigm. Management chooses "to bear those ills we have rather than fly to others that we know not of."（勇气来挑战现有的方式，考虑到成本，技术以及最终可能存在的结果。大多数的人都选择”忍受当前的痛苦，而不愿意去一个我们不太确定的地方“）

The clock-free design paradigm must eventually prevail. It fits physics. Each increase in the relative cost of communication over logic brings us closer to the fundamental physical truth that "simultaneous" lacks meaning. The clock-free paradigm fits everything we have learned since Turing about programming. Software avoids tyrannous global time constraints. Without freedom from global time constraints, software libraries would be impossible. "Modularity" and "data hiding" are basic principles of quality software because they allow reuse and local optimization. Software is self-timed: Each subroutine runs at its own pace; its users wait for it to finish. Imagine what software would be like if subroutines could start and end only at preset time intervals. "My subroutines all start at 3.68 millisecond intervals; how often do yours start?"（但是作者相信这种方式最终会普及，因为这是符合物理规律的。通信相对开销的不断上升，使得我们不断地接近一个基本的事实，那就是”同时“是没有意义的。这个和软件也是一样的，如果不能够从时间的约束中解脱出来，那么软件是没有办法工作的。）

** 如何定义软件稳定
@2012-8-30 redis作者在自己的文章里面提到了如何定义软件到达了production-ready（我理解就是stable）状态 http://antirez.com/post/redis-26-sentinel-update.html

There are probably much more software engineering books than there should be ;) So despite of the general title of this section my goal here is to state what stable means for me and for the Redis project. After all there are a number of possible metrics, but mine is very simple and in the latest three years worked very reliably.
#+BEGIN_VERSE
A Redis branch without active development (major changes to the source code that are not just additions without impacts to what we already have) is stable when the number of critical bugs discovered in the latest 8 weeks is near to zero.

In this context a critical bug is a bug that corrupts data, that crashes the server, that creates an inconsistency between master and slave, and that, at the same time, is not triggered by a crazy edge-case, so edge that it is unlikely to run into it involuntarily. 
#+END_VERSE

在作者看来，一个稳定的版本意味着：
   - 没有必要增加新feature
   - 在过去8周内没有严重的bug（比如宕机或者是数据损坏等，但是不考虑一些非常极端的case）

** Systems Programming at Twitter
http://monkey.org/~marius/talks/twittersystems/

主要围绕下面几个方面：
   - Clean concurrent programming model: simple, safe, and modular programs; uniform programming model. *something about scala*
   - Message passing architecture: High concurrency, fault tolerant, performant. *something about rpc in finagle and scala*
   - Protocol support: largely agnostic, support HTTP, thrift, memcache, redis, MySQL... *???*
   - Observability: for diagnostics, profiling, optimization 个人感觉在这方面做得不错值得借鉴和学习：
     - 统计数据可以通过http接口访问到(ostrich)，并且由viz展现出来。
     - rpc交互追踪可以通过dapper的开源实现zipkin完成。
     - profile数据同样可以通过http接口访问到，使用pprof来做分析。
     - Tracing, cancellation, thread-biasing pools, etc. with zero user code change 并且这些功能不需要用户修改代码

*TODO（dirlt）：其实我很想知道scala语言本身对于他们的系统架构的影响有多大？不过从作者花这么长的篇幅来讨论scala语言，我觉得今后可以在实践中好好体会*

** The Architecture of Open Source Applications
http://www.aosabook.org/en/index.html

TODO(dirlt):


